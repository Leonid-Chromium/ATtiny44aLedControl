
44ANewADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a8  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043e  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d8  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ad  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	15 c0       	rjmp	.+42     	; 0x5c <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:


int main(void)
{
	//Все пины порта A на вход
	DDRA=0;
  34:	1a ba       	out	0x1a, r1	; 26
	ADMUX=
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	87 b9       	out	0x07, r24	; 7
	(1<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3)|(0<<MUX4)|(0<<MUX5)|//Выбор читаемого порта
	(0<<REFS0)|(0<<REFS1);//Выбор ИОП
	
	ADCSRB=
  3a:	80 e1       	ldi	r24, 0x10	; 16
  3c:	83 b9       	out	0x03, r24	; 3
	(0<<BIN)|(0<<ACME)|//Повторение стандартных настроек
	(1<<ADLAR)|//Ровнение справо
	(0<<ADTS0)|(0<<ADTS1)|(0<<ADTS2);//Повторение стандартных настроек
	
	ADCSRA=
  3e:	85 ea       	ldi	r24, 0xA5	; 165
  40:	86 b9       	out	0x06, r24	; 6
	(1<<ADPS0)|(0<<ADPS1)|(1<<ADPS2)|//Устанавлиываем прескейлер
	(1<<ADATE)|//Авто-тригиринг цели АЦП
	(0<<ADIE);//Запрет прерываний
	
	//Запуск АЦП
	ADCSRA|=(1<<ADSC);
  42:	86 b1       	in	r24, 0x06	; 6
  44:	80 64       	ori	r24, 0x40	; 64
  46:	86 b9       	out	0x06, r24	; 6
	
	DIDR0=0xff;//Выключение цифровых выходов на пинах АЦП
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	81 b9       	out	0x01, r24	; 1
	
	//настройка всех портов на выход
	DDRB = 0b11111111;
  4c:	87 bb       	out	0x17, r24	; 23
	//настройка таймера
	TCCR0A = 0b10000011;
  4e:	83 e8       	ldi	r24, 0x83	; 131
  50:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0b00000010;
  52:	82 e0       	ldi	r24, 0x02	; 2
  54:	83 bf       	out	0x33, r24	; 51
    while (1) 
    {
		OCR0A=ADCH;
  56:	85 b1       	in	r24, 0x05	; 5
  58:	86 bf       	out	0x36, r24	; 54
  5a:	fd cf       	rjmp	.-6      	; 0x56 <__SREG__+0x17>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
