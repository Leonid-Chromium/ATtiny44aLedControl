
44ANewADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000053c  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000478  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022a  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cd  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 ea       	ldi	r30, 0xA4	; 164
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a5 36       	cpi	r26, 0x65	; 101
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	53 d0       	rcall	.+166    	; 0xfc <main>
  56:	a4 c0       	rjmp	.+328    	; 0x1a0 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_8>:
char DMA = 250;
char ALFA1 = 8;
char ALFA2 = 32;

ISR(TIM1_OVF_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	2f 93       	push	r18
  66:	3f 93       	push	r19
  68:	4f 93       	push	r20
  6a:	5f 93       	push	r21
  6c:	6f 93       	push	r22
  6e:	7f 93       	push	r23
  70:	8f 93       	push	r24
  72:	9f 93       	push	r25
  74:	af 93       	push	r26
  76:	bf 93       	push	r27
  78:	ef 93       	push	r30
  7a:	ff 93       	push	r31
	EMA=(ADCH/ALFA1)+(EMA/(1-ALFA1));
  7c:	45 b1       	in	r20, 0x05	; 5
  7e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <ALFA1>
  82:	e1 e0       	ldi	r30, 0x01	; 1
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	bf 01       	movw	r22, r30
  88:	63 1b       	sub	r22, r19
  8a:	71 09       	sbc	r23, r1
  8c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <EMA>
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	5f d0       	rcall	.+190    	; 0x152 <__divmodhi4>
  94:	26 2f       	mov	r18, r22
  96:	84 2f       	mov	r24, r20
  98:	63 2f       	mov	r22, r19
  9a:	4f d0       	rcall	.+158    	; 0x13a <__udivmodqi4>
  9c:	38 2f       	mov	r19, r24
  9e:	32 0f       	add	r19, r18
  a0:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <EMA>
	DMA=(EMA/ALFA2)+(DMA/(1-ALFA2));
  a4:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	bf 01       	movw	r22, r30
  aa:	64 1b       	sub	r22, r20
  ac:	71 09       	sbc	r23, r1
  ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <DMA>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	4e d0       	rcall	.+156    	; 0x152 <__divmodhi4>
  b6:	26 2f       	mov	r18, r22
  b8:	83 2f       	mov	r24, r19
  ba:	64 2f       	mov	r22, r20
  bc:	3e d0       	rcall	.+124    	; 0x13a <__udivmodqi4>
  be:	82 0f       	add	r24, r18
  c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <DMA>
	if ((DMA-EMA)>32)
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	83 1b       	sub	r24, r19
  c8:	91 09       	sbc	r25, r1
  ca:	81 97       	sbiw	r24, 0x21	; 33
  cc:	24 f0       	brlt	.+8      	; 0xd6 <__vector_8+0x7c>
	{
		bit=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
  d4:	02 c0       	rjmp	.+4      	; 0xda <__vector_8+0x80>
	} 
	else
	{
		bit=0;
  d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
	}
	
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:

int main(void)
{
	/////////////////INTERRUPTION///////////
	
	TIMSK1 |= (1<<TOIE1);//Разрешение на работу таймера.счётчика
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	8c b9       	out	0x0c, r24	; 12
	TCCR1B |= (0<<CS12)|(0<<CS11)|(1<<CS10); //Работа без прескейлера
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;//обнуляем таймер/счётчик
 108:	1d bc       	out	0x2d, r1	; 45
 10a:	1c bc       	out	0x2c, r1	; 44
	
	sei();//Глобально разрешаем прерывания
 10c:	78 94       	sei
	
	//////////////////////////////ADC///////////////////////////////
	
	//Все пины порта A на вход
	DDRA=0;
 10e:	1a ba       	out	0x1a, r1	; 26
	ADMUX=
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	87 b9       	out	0x07, r24	; 7
	(1<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3)|(0<<MUX4)|(0<<MUX5)|//Выбор читаемого порта
	(0<<REFS0)|(0<<REFS1);//Выбор ИОП
	
	ADCSRB=
 114:	80 e1       	ldi	r24, 0x10	; 16
 116:	83 b9       	out	0x03, r24	; 3
	(0<<BIN)|(0<<ACME)|//Повторение стандартных настроек
	(1<<ADLAR)|//Ровнение справо
	(0<<ADTS0)|(0<<ADTS1)|(0<<ADTS2);//Повторение стандартных настроек
	
	ADCSRA=
 118:	85 ea       	ldi	r24, 0xA5	; 165
 11a:	86 b9       	out	0x06, r24	; 6
	(1<<ADPS0)|(0<<ADPS1)|(1<<ADPS2)|//Устанавлиываем прескейлер
	(1<<ADATE)|//Авто-тригиринг цели АЦП
	(0<<ADIE);//Запрет прерываний
	
	//Запуск АЦП
	ADCSRA|=(1<<ADSC);
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	86 b9       	out	0x06, r24	; 6
	
	DIDR0=0xff;//Выключение цифровых выходов на пинах АЦП
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 b9       	out	0x01, r24	; 1
	
	///////////////////PWD////////////////////////
	
	//настройка всех портов на выход
	DDRB = 0b11111111;
 126:	87 bb       	out	0x17, r24	; 23
	//настройка таймера
	TCCR0A = 0b10000011;
 128:	83 e8       	ldi	r24, 0x83	; 131
 12a:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0b00000010;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	83 bf       	out	0x33, r24	; 51
	OCR0A=128;
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	86 bf       	out	0x36, r24	; 54
	char ALFA2 = 32;
	*/
	
    while (1) 
    {
		OCR0A=ADCH;
 134:	85 b1       	in	r24, 0x05	; 5
 136:	86 bf       	out	0x36, r24	; 54
 138:	fd cf       	rjmp	.-6      	; 0x134 <__DATA_REGION_LENGTH__+0x34>

0000013a <__udivmodqi4>:
 13a:	99 1b       	sub	r25, r25
 13c:	79 e0       	ldi	r23, 0x09	; 9
 13e:	04 c0       	rjmp	.+8      	; 0x148 <__udivmodqi4_ep>

00000140 <__udivmodqi4_loop>:
 140:	99 1f       	adc	r25, r25
 142:	96 17       	cp	r25, r22
 144:	08 f0       	brcs	.+2      	; 0x148 <__udivmodqi4_ep>
 146:	96 1b       	sub	r25, r22

00000148 <__udivmodqi4_ep>:
 148:	88 1f       	adc	r24, r24
 14a:	7a 95       	dec	r23
 14c:	c9 f7       	brne	.-14     	; 0x140 <__udivmodqi4_loop>
 14e:	80 95       	com	r24
 150:	08 95       	ret

00000152 <__divmodhi4>:
 152:	97 fb       	bst	r25, 7
 154:	07 2e       	mov	r0, r23
 156:	16 f4       	brtc	.+4      	; 0x15c <__divmodhi4+0xa>
 158:	00 94       	com	r0
 15a:	06 d0       	rcall	.+12     	; 0x168 <__divmodhi4_neg1>
 15c:	77 fd       	sbrc	r23, 7
 15e:	08 d0       	rcall	.+16     	; 0x170 <__divmodhi4_neg2>
 160:	0b d0       	rcall	.+22     	; 0x178 <__udivmodhi4>
 162:	07 fc       	sbrc	r0, 7
 164:	05 d0       	rcall	.+10     	; 0x170 <__divmodhi4_neg2>
 166:	3e f4       	brtc	.+14     	; 0x176 <__divmodhi4_exit>

00000168 <__divmodhi4_neg1>:
 168:	90 95       	com	r25
 16a:	81 95       	neg	r24
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	08 95       	ret

00000170 <__divmodhi4_neg2>:
 170:	70 95       	com	r23
 172:	61 95       	neg	r22
 174:	7f 4f       	sbci	r23, 0xFF	; 255

00000176 <__divmodhi4_exit>:
 176:	08 95       	ret

00000178 <__udivmodhi4>:
 178:	aa 1b       	sub	r26, r26
 17a:	bb 1b       	sub	r27, r27
 17c:	51 e1       	ldi	r21, 0x11	; 17
 17e:	07 c0       	rjmp	.+14     	; 0x18e <__udivmodhi4_ep>

00000180 <__udivmodhi4_loop>:
 180:	aa 1f       	adc	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	a6 17       	cp	r26, r22
 186:	b7 07       	cpc	r27, r23
 188:	10 f0       	brcs	.+4      	; 0x18e <__udivmodhi4_ep>
 18a:	a6 1b       	sub	r26, r22
 18c:	b7 0b       	sbc	r27, r23

0000018e <__udivmodhi4_ep>:
 18e:	88 1f       	adc	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	5a 95       	dec	r21
 194:	a9 f7       	brne	.-22     	; 0x180 <__udivmodhi4_loop>
 196:	80 95       	com	r24
 198:	90 95       	com	r25
 19a:	bc 01       	movw	r22, r24
 19c:	cd 01       	movw	r24, r26
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
